// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: bench.proto

package msgs

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/zhiduoke/gapi/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BenchFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BenchFriend) Reset() {
	*x = BenchFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bench_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchFriend) ProtoMessage() {}

func (x *BenchFriend) ProtoReflect() protoreflect.Message {
	mi := &file_bench_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchFriend.ProtoReflect.Descriptor instead.
func (*BenchFriend) Descriptor() ([]byte, []int) {
	return file_bench_proto_rawDescGZIP(), []int{0}
}

func (x *BenchFriend) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BenchFriend) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BenchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId           string         `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Index         int64          `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Guid          string         `protobuf:"bytes,3,opt,name=guid,proto3" json:"guid,omitempty"`
	IsActive      bool           `protobuf:"varint,4,opt,name=isActive,proto3" json:"isActive,omitempty"`
	Balance       string         `protobuf:"bytes,5,opt,name=balance,proto3" json:"balance,omitempty"`
	Picture       string         `protobuf:"bytes,6,opt,name=picture,proto3" json:"picture,omitempty"`
	Age           int64          `protobuf:"varint,7,opt,name=age,proto3" json:"age,omitempty"`
	EyeColor      string         `protobuf:"bytes,8,opt,name=eyeColor,proto3" json:"eyeColor,omitempty"`
	Name          string         `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Gender        string         `protobuf:"bytes,10,opt,name=gender,proto3" json:"gender,omitempty"`
	Company       string         `protobuf:"bytes,11,opt,name=company,proto3" json:"company,omitempty"`
	Email         string         `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	Phone         string         `protobuf:"bytes,13,opt,name=phone,proto3" json:"phone,omitempty"`
	Address       string         `protobuf:"bytes,14,opt,name=address,proto3" json:"address,omitempty"`
	About         string         `protobuf:"bytes,15,opt,name=about,proto3" json:"about,omitempty"`
	Registered    string         `protobuf:"bytes,16,opt,name=registered,proto3" json:"registered,omitempty"`
	Latitude      float64        `protobuf:"fixed64,17,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64        `protobuf:"fixed64,18,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Tags          []string       `protobuf:"bytes,19,rep,name=tags,proto3" json:"tags,omitempty"`
	Friends       []*BenchFriend `protobuf:"bytes,20,rep,name=friends,proto3" json:"friends,omitempty"`
	Greeting      string         `protobuf:"bytes,21,opt,name=greeting,proto3" json:"greeting,omitempty"`
	FavoriteFruit string         `protobuf:"bytes,22,opt,name=favoriteFruit,proto3" json:"favoriteFruit,omitempty"`
}

func (x *BenchMessage) Reset() {
	*x = BenchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bench_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchMessage) ProtoMessage() {}

func (x *BenchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bench_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchMessage.ProtoReflect.Descriptor instead.
func (*BenchMessage) Descriptor() ([]byte, []int) {
	return file_bench_proto_rawDescGZIP(), []int{1}
}

func (x *BenchMessage) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *BenchMessage) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BenchMessage) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *BenchMessage) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *BenchMessage) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *BenchMessage) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *BenchMessage) GetAge() int64 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *BenchMessage) GetEyeColor() string {
	if x != nil {
		return x.EyeColor
	}
	return ""
}

func (x *BenchMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BenchMessage) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *BenchMessage) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *BenchMessage) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BenchMessage) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *BenchMessage) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BenchMessage) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *BenchMessage) GetRegistered() string {
	if x != nil {
		return x.Registered
	}
	return ""
}

func (x *BenchMessage) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *BenchMessage) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *BenchMessage) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *BenchMessage) GetFriends() []*BenchFriend {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *BenchMessage) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *BenchMessage) GetFavoriteFruit() string {
	if x != nil {
		return x.FavoriteFruit
	}
	return ""
}

type BenchArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BenchArgs) Reset() {
	*x = BenchArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bench_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchArgs) ProtoMessage() {}

func (x *BenchArgs) ProtoReflect() protoreflect.Message {
	mi := &file_bench_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchArgs.ProtoReflect.Descriptor instead.
func (*BenchArgs) Descriptor() ([]byte, []int) {
	return file_bench_proto_rawDescGZIP(), []int{2}
}

type BenchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msgs []*BenchMessage `protobuf:"bytes,1,rep,name=msgs,proto3" json:"msgs,omitempty"`
}

func (x *BenchReply) Reset() {
	*x = BenchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bench_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchReply) ProtoMessage() {}

func (x *BenchReply) ProtoReflect() protoreflect.Message {
	mi := &file_bench_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchReply.ProtoReflect.Descriptor instead.
func (*BenchReply) Descriptor() ([]byte, []int) {
	return file_bench_proto_rawDescGZIP(), []int{3}
}

func (x *BenchReply) GetMsgs() []*BenchMessage {
	if x != nil {
		return x.Msgs
	}
	return nil
}

var File_bench_proto protoreflect.FileDescriptor

var file_bench_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x1a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x31, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcc, 0x04, 0x0a, 0x0c, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x31,
	0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x46, 0x72, 0x75, 0x69, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x46, 0x72,
	0x75, 0x69, 0x74, 0x22, 0x0b, 0x0a, 0x09, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x41, 0x72, 0x67, 0x73,
	0x22, 0x3a, 0x0a, 0x0a, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c,
	0x0a, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x32, 0x65, 0x0a, 0x0c,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x04,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x6d, 0x73, 0x67,
	0x73, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x12, 0xd2, 0xd3, 0xee, 0x0b, 0x0d, 0x0a, 0x0b, 0x2f, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0xd2, 0xf7, 0xd6, 0x0f, 0x05, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x6d, 0x73, 0x67, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bench_proto_rawDescOnce sync.Once
	file_bench_proto_rawDescData = file_bench_proto_rawDesc
)

func file_bench_proto_rawDescGZIP() []byte {
	file_bench_proto_rawDescOnce.Do(func() {
		file_bench_proto_rawDescData = protoimpl.X.CompressGZIP(file_bench_proto_rawDescData)
	})
	return file_bench_proto_rawDescData
}

var file_bench_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_bench_proto_goTypes = []interface{}{
	(*BenchFriend)(nil),  // 0: tests.msgs.BenchFriend
	(*BenchMessage)(nil), // 1: tests.msgs.BenchMessage
	(*BenchArgs)(nil),    // 2: tests.msgs.BenchArgs
	(*BenchReply)(nil),   // 3: tests.msgs.BenchReply
}
var file_bench_proto_depIdxs = []int32{
	0, // 0: tests.msgs.BenchMessage.friends:type_name -> tests.msgs.BenchFriend
	1, // 1: tests.msgs.BenchReply.msgs:type_name -> tests.msgs.BenchMessage
	2, // 2: tests.msgs.BenchService.Test:input_type -> tests.msgs.BenchArgs
	3, // 3: tests.msgs.BenchService.Test:output_type -> tests.msgs.BenchReply
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_bench_proto_init() }
func file_bench_proto_init() {
	if File_bench_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bench_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bench_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bench_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bench_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bench_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bench_proto_goTypes,
		DependencyIndexes: file_bench_proto_depIdxs,
		MessageInfos:      file_bench_proto_msgTypes,
	}.Build()
	File_bench_proto = out.File
	file_bench_proto_rawDesc = nil
	file_bench_proto_goTypes = nil
	file_bench_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BenchServiceClient is the client API for BenchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BenchServiceClient interface {
	Test(ctx context.Context, in *BenchArgs, opts ...grpc.CallOption) (*BenchReply, error)
}

type benchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchServiceClient(cc grpc.ClientConnInterface) BenchServiceClient {
	return &benchServiceClient{cc}
}

func (c *benchServiceClient) Test(ctx context.Context, in *BenchArgs, opts ...grpc.CallOption) (*BenchReply, error) {
	out := new(BenchReply)
	err := c.cc.Invoke(ctx, "/tests.msgs.BenchService/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenchServiceServer is the server API for BenchService service.
type BenchServiceServer interface {
	Test(context.Context, *BenchArgs) (*BenchReply, error)
}

// UnimplementedBenchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBenchServiceServer struct {
}

func (*UnimplementedBenchServiceServer) Test(context.Context, *BenchArgs) (*BenchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}

func RegisterBenchServiceServer(s *grpc.Server, srv BenchServiceServer) {
	s.RegisterService(&_BenchService_serviceDesc, srv)
}

func _BenchService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BenchArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tests.msgs.BenchService/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchServiceServer).Test(ctx, req.(*BenchArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _BenchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tests.msgs.BenchService",
	HandlerType: (*BenchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _BenchService_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bench.proto",
}
